<?php

namespace AppBundle\Repository;

use Symfony\Component\Validator\Constraints\Date;
/**
 * ContractRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContractRepository extends \Doctrine\ORM\EntityRepository
{
    //esta funcion me devuelve los contratos q ya expiraron
    public function getAllContractExpired($filter){
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('c')
            ->from('AppBundle:Contract','c')
            ->innerJoin('c.suplier','s')
        ;
        if($filter!=""){
            $qb
                ->where($qb->expr()->like('c.consecutiveNumber','?1'))
                ->where($qb->expr()->like('c.contractNumber','?1'))
                ->orWhere($qb->expr()->like('s.name','?1'))
                ->orWhere($qb->expr()->like('c.startDate', '?1'))
                ->orWhere($qb->expr()->like('c.expirationDate', '?1'))
                ->orWhere($qb->expr()->like('c.contractualObject','?1'))
                ->orWhere($qb->expr()->like('c.cucValue', '?1'))
                ->orWhere($qb->expr()->like('c.cupValue', '?1'))
                ->orWhere($qb->expr()->like('c.type', '?1'))
                ->andWhere('c.expirationDate <:date')
                ->setParameter(1, '%' . $filter . '%')
                ->setParameter('date',new \DateTime('today'))
            ;
        }else{
            $qb->where('c.expirationDate <:date');
            $qb->setParameter('date',new \DateTime('today'));
        }
        $result = $qb->getQuery()/*->getResult()*/;
        return $result;
    }

    //esta funcion me devuelve los contratos no han expirados todavia
    public function getAllContractNoExpired($filter){
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('c')
            ->from('AppBundle:Contract','c')
            ->innerJoin('c.suplier','s')
        ;
        if($filter!=""){
            $qb
                ->where($qb->expr()->like('c.consecutiveNumber','?1'))
                ->orWhere($qb->expr()->like('s.name','?1'))
                ->orWhere($qb->expr()->like('c.startDate', '?1'))
                ->orWhere($qb->expr()->like('c.expirationDate', '?1'))
                ->orWhere($qb->expr()->like('c.contractualObject','?1'))
                ->where($qb->expr()->like('c.contractNumber','?1'))
                ->orWhere($qb->expr()->like('c.cucValue', '?1'))
                ->orWhere($qb->expr()->like('c.cupValue', '?1'))
                ->orWhere($qb->expr()->like('c.type', '?1'))
                ->andWhere('c.expirationDate >:date')
                ->setParameter(1, '%' . $filter . '%')
                ->setParameter('date',new \DateTime('today'))
            ;
        }else{
            $qb->where('c.expirationDate >:date');
            $qb->setParameter('date',new \DateTime('today'));
        }

        $result = $qb->getQuery()/*->getResult()*/;
        return $result;
    }

    //esta funcion me devuelve todos los contratos
    public function getAllContracts($filter){
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('c')
            ->from('AppBundle:Contract','c')
            ->innerJoin('c.suplier','s')
        ;
            if($filter!=""){
                $qb
                    ->where($qb->expr()->like('c.id','?1'))
                    ->orWhere($qb->expr()->like('c.contractNumber','?1'))
                    ->orWhere($qb->expr()->like('s.name','?1'))
                    ->orWhere($qb->expr()->like('c.startDate', '?1'))
                    ->orWhere($qb->expr()->like('c.expirationDate', '?1'))
                    ->orWhere($qb->expr()->like('c.contractualObject','?1'))
//                    ->orWhere($qb->expr()->like('c.cucValue', '?1'))
//                    ->orWhere($qb->expr()->like('c.cupValue', '?1'))
                    ->orWhere($qb->expr()->like('c.type', '?1'))
                    ->setParameter(1, '%' . $filter . '%')
                ;
            }
        $qb->orderBy('c.startDate','ASC');
        $result = $qb->getQuery()/*->getResult()*/;
        return $result;
    }

    //esta funcion me devuelve los contratos q estan a 60 dias o menos del expirar
    public function findContractsNextToExpire(){
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('c')
            ->from('AppBundle:Contract','c')
            ->innerJoin('c.suplier','s')
            ->where($qb->expr()->lte('c.days','?1'))
            ->setParameter('1',60)
        ;
        $result = $qb->getQuery()->getResult();
        return $result;
    }
}
